Design:

I used a circular doubly-linked list with a dummy node. Each of my nodes contained the value to be stored (m_item), a pointer to the previous node (m_prev), and a pointer to the next node (m_next). I included a dummy node to minimize differences due to edge cases.

For a typical Sequence, m_prev for each node in the middle points to the previous node and m_next for each node in the middle points to the next node. The dummy node's m_prev points to the last node in the list and m_next points to the first actual node in the list. The last node's m_prev points to the second to last node in the list and m_next points to the dummy node.
For an empty Sequence, the dummy node's m_prev points to itself and its m_next also points to itself.



Pseudocode:
Sequence::Sequence(const Sequence& other)
{
	Create another Sequence (like how the default constructor did)
	Copy each node into the newly created Sequence
}

Sequence& Sequence::operator=(const Sequence& rhs)
{
	Check for aliasing
	Copy rhs into a temp Sequence
	Swap this with temp
}

Sequence::~Sequence()
{
	Repeatedly:
		Erase the node (using erase(pos))
	Delete the head
}

int Sequence::insert(int pos, const ItemType& value)
{
	Check if pos is in bounds
	Create a new node and set its m_item
	Loop until we get to the correct position
	Rearrange pointers
	Increment m_size
}

int Sequence::insert(const ItemType& value)
{
	Create a new node and set its m_item
	Loop until we get to the correct position
	Pass that node and the value as the parameters from the two-argument insert
}

bool Sequence::erase(int pos)
{
	Check if pos is in bounds
	Loop until we get to the correct position
	Adjust the pointers
	Delete the node
	Decrement m_size
}

int Sequence::remove(const ItemType& value)
{
	Repeatedly:
		Check if the iem at that position matches value
			If it does, adjust the pointers, delete the node, and decrement m_size
}

bool Sequence::get(int pos, ItemType& value) const
{
	Check if pos is in bounds
	Loop until we get to the correct position
	Change value to the value at position
}

bool Sequence::set(int pos, const ItemType& value)
{
	Check if pos is in bounds
	Loop until we get to the correct position
	Change the value at position to value
}

int Sequence::find(const ItemType& value) const
{
	Repeatedly:
		Check if the value at position matches value
}

void Sequence::swap(Sequence& other)
{
	Swap head pointers using a temp so we don't lose a pointer)
	Swap sizes using a temp so we don't lose a value
}

int subsequence(const Sequence& seq1, const Sequence& seq2)
{
	Loop through seq1
		Loop through seq2
			If seq1 and seq2 values match, continue
}
void concatReverse(const Sequence& seq1, const Sequence& seq2, Sequence& result)
{
	Create a temp to prevent issues with aliasing
	Repeatedly:
		Copy the item in seq2 into the first position of temp
	Repeatedly:
		Copy the item in seq1 into the first position of temp
	Assign temp to result
}	



Test Cases:

void test()
{
	Sequence s;
	assert(s.insert(0, "lavash") == 0); <-- TEST: INSERTING INTO AN EMPTY SEQUENCE
	assert(s.insert(0, "tortilla") == 0); <-- TEST: INSERTING INTO THE FIRST POSITION (INDEX 0) OF A SEQUENCE
	assert(s.size() == 2); <-- TEST: DOES SIZE() WORK PROPERLY?
	ItemType x = "injera";
	assert(s.get(0, x) && x == "tortilla"); <-- TEST: DOES GET(,) WORK PROPERLY IF YOU STORE INTO AN INITIALIZED ITEMTYPE?
	assert(s.get(1, x) && x == "lavash"); <-- TEST: DOES GET(,) WORK PROPERLY IF YOU STORE INTO AN ITEMTYPE THAT ALREADY HAD SOMETHING FROM SEQUENCE STORED IN IT?
}

int main()
{
	Sequence ss;
	ss.insert(0, "aaa");
	ss.insert(1, "ccc");
	ss.insert(2, "bbb"); <- TEST: INSERTING INTO TO LAST POSITION OF A SEQUENCE
	ItemType x = "xxx";
	assert(!ss.get(3, x) && x == "xxx"); <-- TEST: TRYING TO GET SOMETHING AT A POSITION THAT DOES NOT EXIST (GET(,) SHOULD RETURN FALSE AND X SHOULD NOT CHANGE)
	assert(ss.get(1, x) && x == "ccc");

	test();

	Sequence s;
	assert(s.remove("10") == 0); <-- TEST: REMOVING SOMETHING FROM AN EMPTY LIST
	s.insert(0, "10");
	//s.dump();
	assert(s.find("10") == 0); <-- TEST: TRYING TO FIND AN ITEM IN A SEQUENCE THAT ONLY CONTAINS ONE ITEM
	assert(s.find("30") == -1); <-- TEST: TRYING TO FIND AN ITEM THAT IS NOT IN THE SEQUENCE
	s.insert(1, "30");
	//s.dump();
	s.insert(1, "20"); <-- TEST: INSERTING IN BETWEEN TWO ITEMS IN A SEQUENCE
	//s.dump();
	s.insert(0, "0");
	//s.dump();
	assert(s.find("30") == 3); <-- TEST: TRYING TO FIND THE LAST ITEM IN A SEQUENCE
	ItemType i = "7";
	s.get(2, i);
	assert(i == "20");
	s.insert(4, "39");
	//s.dump();
	s.set(4, "40"); <-- TEST: DOES SET WORK PROPERLY (FOR THE LAST ITEM IN THE SEQUENCE)?
	//s.dump();
	assert(s.find("40") == 4);
	s.insert("25"); <-- TEST: DOES A UNIQUE ITEM GET INSERTED INTO THE CORRECT POSITION WHEN THE POSITION IS NOT SPECIFIED?
	assert(s.find("25") == 3);
	assert(s.insert("25") == 3); <-- TEST: DOES A REPEAT ITEM GET INSERTED INTO THE CORRECT POSITION WHEN THE POSITION IS NOT SPECIFIED?
	//s.dump();
	assert(s.insert("50") == 7);
	s.insert(1, "50");
	assert(s.insert("49") == 1); <-- TEST: IF THERE ARE TWO ITEMS THAT ARE GREATER THAN THE ONE THAT I AM TRYING TO INSERT WITHOUT SPECIFYING THE POSITION, DOES IT GET INSERTED BEFORE THE FIRST ITEM THAT IS GREATER THAN IT?
	//s.dump();
	s.erase(1);
	assert(s.find("49") == -1);
	assert(s.find("50") == 1); <-- TEST: ERASING THE FIRST ITEM WHEN THERE ARE MULTIPLE ITEMS OF THE SAME VALUE
	//s.dump();
	assert(s.remove("25") == 2); <-- TEST: REMOVING WHEN THERE ARE MULTIPLE ITEMS THAT ARE THE SAME AS THE PARAMETER
	//s.dump();
	assert(s.size() == 7);

	Sequence t;
	t.insert(0, "1");
	t.insert(1, "2");
	t.insert(2, "3");
	t.insert(3, "4");
	//t.dump();
	assert(t.size() == 4);

	s.swap(t); <-- TEST: DOES THE SWAP FUNCTION SWAP BOTH THE SEQUENCE AND THE SIZE?
	//s.dump();
	//t.dump();
	assert(s.size() == 4);
	assert(t.size() == 7);

	Sequence u;
	u = s; <-- TEST: DOES THE COPY CONSTRUCTOR WORK PROPERLY?
	//u.dump();
	assert(u.size() == s.size());

	t = u; <-- TEST: DOES THE ASSIGNMENT OPERATOR WORK PROPERLY?
	//t.dump();
	//u.dump();

	Sequence v;
	v.insert("0");
	v.insert("1");
	v.insert("2");
	v.insert("3");
	v.insert("4");
	v.insert("5");
	Sequence w;
	w.insert("2");
	w.insert("3");
	w.insert("4");
	assert(subsequence(v, w) == 2); <-- TEST: DOES SUBSEQUENCE WORK PROPERLY?
	w.erase(1);
	assert(subsequence(v, w) == -1); <-- TEST: DOES SUBSEQUENCE WORK WHEN THE SEQ2 IS NOT A SUBSEQUENCE OF SEQ1?

	Sequence x;
	x.insert(0, "3");
	x.insert(1, "2");
	x.insert(2, "1");
	//x.dump();
	Sequence y;
	y.insert(0, "6");
	y.insert(1, "5");
	y.insert(2, "4");
	//y.dump();
	Sequence z;
	concatReverse(x, y, z); <-- TEST: CONCATREVERSE(,,) INTO AN UNINITIALIZED SEQUENCE
	//z.dump();

	//v.dump();
	concatReverse(x, y, v);
	//v.dump();

	Sequence a;
	a.insert(0, "3");
	a.insert(1, "2");
	a.insert(2, "1");
	Sequence b;
	b.insert(0, "6");
	b.insert(1, "5");
	b.insert(2, "4");
	concatReverse(a, b, a); <-- TEST: CONCATREVERSE(,,) INTO THE SEQUENCE THAT WAS PASSED IN AS SEQ1 (TESTING FOR ISSUES AS A RESULT OF ALIASING)
	//a.dump();
	Sequence c;
	c.insert(0, "3");
	c.insert(1, "2");
	c.insert(2, "1");
	Sequence d;
	d.insert(0, "6");
	d.insert(1, "5");
	d.insert(2, "4");
	concatReverse(c, d, d); <-- TEST: CONCATREVERSE(,,) INTO THE SEQUENCE THAT WAS PASSED IN AS SEQ2 (TESTING FOR ISSUES AS A RESULT OF ALIASING)
	//d.dump();

	cerr << "All test cases passed" << endl;
}